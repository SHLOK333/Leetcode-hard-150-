class Solution {
public:
    // Helper function to perform DFS and clone the graph
    Node* dfs(Node* cur, unordered_map<Node*, Node*>& mp) {
        // Vector to store the neighbors of the clone node
        vector<Node*> neighbor;
        
        // Create a new node (clone) with the value of the current node
        Node* clone = new Node(cur->val);
        
        // Map the current node to its clone in the unordered map
        mp[cur] = clone;
        
        // Iterate through each neighbor of the current node
        for (auto it : cur->neighbors) {
            if (mp.find(it) != mp.end()) {
                // If the neighbor is already cloned, add the clone to the neighbors list
                neighbor.push_back(mp[it]);
            } else {
                // If the neighbor is not cloned yet, perform DFS on the neighbor
                // and add the returned clone to the neighbors list
                neighbor.push_back(dfs(it, mp));
            }
        }
        
        // Set the neighbors of the clone node
        clone->neighbors = neighbor;
        
        // Return the clone node
        return clone;
    }
    
    // Function to initiate the graph cloning process
    Node* cloneGraph(Node* node) {
        // Unordered map to keep track of visited nodes and their clones
        unordered_map<Node*, Node*> mp;
        
        // If the input graph is empty, return NULL
        if (node == NULL)
            return NULL;
        
        // If the graph has only one node with no neighbors
        if (node->neighbors.size() == 0) {
            // Create a clone of the single node and return it
            Node* clone = new Node(node->val);
            return clone;
        }
        
        // Start DFS from the head node and return the cloned graph's head
        return dfs(node, mp);
    }
};
